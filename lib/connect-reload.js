// Generated by CoffeeScript 1.3.3
(function() {
  var client, debounce, path, socketio, util, watchr;

  path = require('path');

  socketio = require('socket.io');

  util = require('util');

  watchr = require('watchr');

  debounce = function(fn, timeout) {
    return function() {
      clearTimeout(timeout);
      return timeout = setTimeout(fn, 50);
    };
  };

  client = function() {
    var reload, script, server, target;
    server = '//%s:%s/';
    reload = function() {
      return io.connect(server).on('connect-reload', function() {
        return document.location.reload(true);
      });
    };
    if (typeof io !== "undefined" && io !== null) {
      return reload();
    }
    script = document.createElement('script');
    script.src = server + 'socket.io/socket.io.js';
    script.onload = reload;
    target = document.getElementsByTagName('script')[0];
    return target.parentNode.insertBefore(script, target.nextSibling);
  };

  module.exports = function(_arg) {
    var address, dir, emit, io, port, reload, server;
    address = _arg.address, dir = _arg.dir, port = _arg.port, server = _arg.server;
    client = util.format("(" + client + "());", address, port);
    io = socketio.listen(server, {
      'log level': 0
    });
    emit = debounce(function() {
      return io.sockets.emit('connect-reload');
    });
    reload = function(file) {
      if (path.basename(file).indexOf('.')) {
        return emit();
      }
    };
    watchr.watch({
      ignoreHiddenFiles: true,
      ignorePatterns: true,
      listener: reload,
      path: dir
    });
    return function(_arg1, res, next) {
      var url;
      url = _arg1.url;
      if (url.slice(-17) !== 'connect-reload.js') {
        return next();
      }
      res.setHeader('Content-Type', 'text/javascript');
      return res.end(client);
    };
  };

}).call(this);
